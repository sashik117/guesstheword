package console;

import com.google.gson.Gson;
import dto.UserLoginDto;
import dto.UserRegisterDto;
import entity.User;
import entity.Word;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import service.AuthService;
import service.GameService;
import service.UserService;

public class Main {
    
    private static final String BLUE = "\033[1;34m";
    private static final String YELLOW = "\033[1;33m";
    private static final String GREEN = "\033[1;32m";
    private static final String RED = "\033[1;31m";
    private static final String RESET = "\033[0m";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Gson gson = new Gson();

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
        UserService userService = new UserService();
        AuthService authService = new AuthService(userService);
        GameService gameService = new GameService();

        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è ASCII-–±–∞–Ω–µ—Ä–∞
        System.out.println(BLUE + "====================================");
        System.out.println("      üéÆ Welcome to Guess The Word!      ");
        System.out.println("====================================" + RESET);

        System.out.println(YELLOW + "1 - –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è");
        System.out.println("2 - –í—Ö—ñ–¥" + RESET);
        System.out.print("–í–∞—à –≤–∏–±—ñ—Ä: ");

        int choice = scanner.nextInt();
        scanner.nextLine(); // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞

        User user = null;

        if (choice == 1) {
            System.out.print(YELLOW + "[?] –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è: " + RESET);
            String username = scanner.nextLine();

            System.out.print(YELLOW + "[?] –í–≤–µ–¥—ñ—Ç—å email: " + RESET);
            String email = scanner.nextLine();

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
            if (!isValidEmail(email)) {
                System.err.println(RED + "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email." + RESET);
                return;
            }

            System.out.print(YELLOW + "[?] –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å: " + RESET);
            String password = scanner.nextLine();

            try {
                UserRegisterDto registerDto = new UserRegisterDto(username, email, password);
                authService.register(registerDto);
                System.out.println(GREEN + "‚úî –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!" + RESET);
            } catch (IllegalArgumentException e) {
                System.err.println(RED + "–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: " + e.getMessage() + RESET);
                return;
            }
        } else if (choice == 2) {
            System.out.print(YELLOW + "[?] –í–≤–µ–¥—ñ—Ç—å email: " + RESET);
            String email = scanner.nextLine();

            System.out.print(YELLOW + "[?] –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å: " + RESET);
            String password = scanner.nextLine();

            try {
                UserLoginDto loginDto = new UserLoginDto(email, password);
                user = authService.login(loginDto);
                System.out.println(
                    GREEN + "‚úî –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, " + user.getName() + "! üéâ" + RESET);
            } catch (IllegalArgumentException e) {
                System.err.println(RED + "–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: " + e.getMessage() + RESET);
                return;
            }
        } else {
            System.out.println(RED + "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä." + RESET);
            return;
        }

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∏, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞–≤—Å—è
        if (user != null) {
            Word word = gameService.createWord();
            var game = gameService.createGame(user, word);

            // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥—Ä–∏ —É —Ñ–∞–π–ª
            try (FileWriter writer = new FileWriter("game_data.json")) {
                gson.toJson(game, writer);
                System.out.println(GREEN + "‚úî –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª game_data.json" + RESET);
            } catch (IOException e) {
                System.err.println(RED + "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: " + e.getMessage() + RESET);
                e.printStackTrace();
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ email —á–µ—Ä–µ–∑ regex
    private static boolean isValidEmail(String email) {
        String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
        return email.matches(emailRegex);
    }
}
