package console;

import com.google.gson.Gson;
import dto.UserLoginDto;
import dto.UserRegisterDto;
import entity.User;
import java.util.Scanner;
import pages.AuthView;
import pages.GameView;
import pages.UserView;
import service.AuthService;
import service.GameService;
import service.UserService;

public class Main {

    private static final String BLUE = "\033[1;34m";
    private static final String YELLOW = "\033[1;33m";
    private static final String GREEN = "\033[1;32m";
    private static final String RED = "\033[1;31m";
    private static final String RESET = "\033[0m";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Gson gson = new Gson();

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
        UserService userService = new UserService();
        AuthService authService = new AuthService(userService);
        GameService gameService = new GameService();

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤
        AuthView authView = new AuthView();
        GameView gameView = new GameView();
        UserView userView = new UserView();

        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        while (true) {
            System.out.println(BLUE + "====================================");
            System.out.println("      üéÆ Welcome to Guess The Word!      ");
            System.out.println("====================================" + RESET);

            System.out.println(YELLOW + "1 - –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è");
            System.out.println("2 - –í—Ö—ñ–¥" + RESET);
            System.out.print("–í–∞—à –≤–∏–±—ñ—Ä: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞

            User user = null;

            if (choice == 1) {
                // –õ–æ–≥—ñ–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
                System.out.print(YELLOW + "[?] –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è: " + RESET);
                String username = scanner.nextLine();

                System.out.print(YELLOW + "[?] –í–≤–µ–¥—ñ—Ç—å email: " + RESET);
                String email = scanner.nextLine();

                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
                if (!isValidEmail(email)) {
                    System.err.println(RED + "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email." + RESET);
                    return;
                }

                System.out.print(YELLOW + "[?] –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å: " + RESET);
                String password = scanner.nextLine();

                try {
                    UserRegisterDto registerDto = new UserRegisterDto(username, email, password);
                    authService.register(registerDto);
                    System.out.println(GREEN + "‚úî –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!" + RESET);
                } catch (IllegalArgumentException e) {
                    System.err.println(RED + "–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: " + e.getMessage() + RESET);
                    return;
                }
            } else if (choice == 2) {
                // –õ–æ–≥—ñ–∫–∞ –≤—Ö–æ–¥—É
                System.out.print(YELLOW + "[?] –í–≤–µ–¥—ñ—Ç—å email: " + RESET);
                String email = scanner.nextLine();

                System.out.print(YELLOW + "[?] –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å: " + RESET);
                String password = scanner.nextLine();

                try {
                    UserLoginDto loginDto = new UserLoginDto(email, password);
                    user = authService.login(loginDto);
                    System.out.println(
                        GREEN + "‚úî –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, " + user.getName() + "! üéâ"
                            + RESET);

                    // –ü—ñ—Å–ª—è –≤—Ö–æ–¥—É –≤–∏–∫–ª–∏–∫–∞—î–º–æ –¥–∏—Å–ø–ª–µ–π –º–µ–Ω—é
                    while (true) {
                        System.out.println(BLUE + "=============================");
                        System.out.println("      –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞      ");
                        System.out.println("=============================" + RESET);

                        System.out.println(YELLOW + "1 - –ü–æ—á–∞—Ç–∏ –≥—Ä—É");
                        System.out.println("2 - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
                        System.out.println("3 - –í–∏–π—Ç–∏" + RESET);
                        System.out.print("–í–∞—à –≤–∏–±—ñ—Ä: ");

                        String actionChoice = scanner.nextLine();

                        switch (actionChoice) {
                            case "1":
                                gameView.displayGame(scanner, gameService, user); // –ó–∞–ø—É—Å–∫ –≥—Ä–∏
                                break;
                            case "2":
                                userView.displayUserMenu(user); // –ü–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                                break;
                            case "3":
                                System.out.println(GREEN + "–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!" + RESET);
                                return;
                            default:
                                System.out.println(RED + "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä." + RESET);
                        }
                    }
                } catch (IllegalArgumentException e) {
                    System.err.println(RED + "–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: " + e.getMessage() + RESET);
                    return;
                }
            } else {
                System.out.println(RED + "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä." + RESET);
                return;
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ email —á–µ—Ä–µ–∑ regex
    private static boolean isValidEmail(String email) {
        String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
        return email.matches(emailRegex);
    }
}
