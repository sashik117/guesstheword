package console;

import com.google.gson.Gson;
import dto.UserDto;
import entity.User;
import java.util.Scanner;
import pages.AuthView;
import pages.GameView;
import pages.UserView;
import service.AuthService;
import service.GameService;
import service.HintService;
import service.UserService;

public class Main {

    private static final String BLUE = "\033[1;34m";
    private static final String YELLOW = "\033[1;33m";
    private static final String GREEN = "\033[1;32m";
    private static final String RED = "\033[1;31m";
    private static final String RESET = "\033[0m";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Gson gson = new Gson();

        UserService userService = new UserService();
        AuthService authService = new AuthService(userService);
        HintService hintService = new HintService();
        GameService gameService = new GameService(hintService);

        AuthView authView = new AuthView();
        GameView gameView = new GameView(gameService); // –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–¥–∞—î–º–æ GameService
        UserView userView = new UserView();

        while (true) {
            System.out.println(BLUE + "====================================");
            System.out.println("      üéÆ Welcome to Guess The Word!      ");
            System.out.println("====================================" + RESET);

            System.out.println(YELLOW + "1 - –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è");
            System.out.println("2 - –í—Ö—ñ–¥");
            System.out.println("3 - –í–∏—Ö—ñ–¥" + RESET);
            System.out.print("–í–∞—à –≤–∏–±—ñ—Ä: ");

            String input = scanner.nextLine();
            if (!input.matches("[1-3]")) {
                System.out.println(RED + "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä." + RESET);
                continue;
            }

            int choice = Integer.parseInt(input);
            if (choice == 3) {
                System.out.println(GREEN + "–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!" + RESET);
                break;
            }

            if (choice == 1) {
                System.out.print(YELLOW + "[?] –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è (–º—ñ–Ω. 3 —Å–∏–º–≤–æ–ª–∏): " + RESET);
                String username = scanner.nextLine().trim();
                if (username.length() < 3) {
                    System.out.println(RED + "‚ùå –Ü–º'—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª–∏!" + RESET);
                    continue;
                }

                System.out.print(YELLOW + "[?] –í–≤–µ–¥—ñ—Ç—å email: " + RESET);
                String email = scanner.nextLine().trim();
                if (!isValidEmail(email)) {
                    System.out.println(RED + "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email!" + RESET);
                    continue;
                }

                System.out.print(YELLOW + "[?] –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å (–º—ñ–Ω. 6 —Å–∏–º–≤–æ–ª—ñ–≤): " + RESET);
                String password = scanner.nextLine().trim();
                if (password.length() < 6) {
                    System.out.println(RED + "‚ùå –ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤!" + RESET);
                    continue;
                }
                try {
                    UserDto registerDto = new UserDto(username, email, password, null);
                    authService.register(registerDto);
                } catch (IllegalArgumentException e) {
                    System.err.println(RED + "–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: " + e.getMessage() + RESET);
                }
            } else if (choice == 2) {
                System.out.print(YELLOW + "[?] –í–≤–µ–¥—ñ—Ç—å email: " + RESET);
                String email = scanner.nextLine();
                System.out.print(YELLOW + "[?] –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å: " + RESET);
                String password = scanner.nextLine();
                try {
                    UserDto loginDto = new UserDto(null, email, password, null);
                    User user = authService.login(loginDto);
                    System.out.println(
                        GREEN + "‚úîÔ∏è –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, " + user.getName() + "! üéâ"
                            + RESET);
                    while (true) {
                        System.out.println(BLUE + "=============================");
                        System.out.println("         –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é         ");
                        System.out.println("=============================" + RESET);

                        System.out.println(YELLOW + "1 - –ü–æ—á–∞—Ç–∏ –≥—Ä—É");
                        System.out.println("2 - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
                        System.out.println("3 - –í–∏–π—Ç–∏" + RESET);
                        System.out.print("–í–∞—à –≤–∏–±—ñ—Ä: ");

                        String actionChoice = scanner.nextLine();
                        switch (actionChoice) {
                            case "1":
                                // –ü–µ—Ä–µ–¥–∞—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —É displayGame
                                gameView.displayGame(scanner, gameService, user);
                                break;
                            case "2":
                                userView.displayUserMenu(user);
                                break;
                            case "3":
                                System.out.println(GREEN + "–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!" + RESET);
                                return;
                            default:
                                System.out.println(RED + "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä." + RESET);
                        }
                    }
                } catch (IllegalArgumentException e) {
                    System.err.println(RED + "–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: " + e.getMessage() + RESET);
                }
            }
        }
    }

    private static boolean isValidEmail(String email) {
        String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
        return email.matches(emailRegex);
    }
}